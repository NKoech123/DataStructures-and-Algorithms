class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        '''
        [-2,  1,  -3,  4,  -1,2,1,-5,4]
          sub
          max
        dp=[-2,i]
        
        Time O(N)
        Space O(N) . Space complexity could be better
        '''
        
        dp=[0] * len(nums)
        
        dp[0]= nums[0]
        
        for i in range(1, len(nums)) :
            
            dp[i] = max( nums[i] , dp[i-1]+nums[i])
            
        return max(dp)
        

    def maxSubArray_KadanesAlgo(self, nums: List[int]) -> int:
        '''
        [-2,  1,  -3,  4,  -1,2,1,-5,4]
          sub
          max
      
        
        Time O(N)
        Space O(1) - only using two variables
        '''
        
        curr_subarray=nums[0]
        max_subarray= curr_subarray
        
        for i in range(1,len(nums)):
            
            curr_subarray = max (nums[i]+curr_subarray, nums[i])
            
            max_subarray = max ( max_subarray , curr_subarray)
            
        return max_subarray
       
